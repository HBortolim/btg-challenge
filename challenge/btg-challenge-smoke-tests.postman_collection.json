{
	"info": {
		"_postman_id": "a8c91b2b-c8e1-4b4f-8b9a-4f5e6d7c8d9e",
		"name": "BTG Challenge - Smoke Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Register New User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random username and save it to a collection variable",
							"const randomUsername = `testuser_${Date.now()}`;",
							"pm.collectionVariables.set(\"username\", randomUsername);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response should indicate successful registration\", function () {",
							"    pm.response.to.not.be.error;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Login and Get Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should contain a JWT token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.not.be.empty;",
							"    // Save the token to a collection variable for other requests",
							"    pm.collectionVariables.set(\"jwt_token\", jsonData.token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Create a Friend",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body should contain the created friend with an ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.name).to.include(\"Smoke Test Friend\");",
							"    // Save the friend ID for the loan request",
							"    pm.collectionVariables.set(\"friendId\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Smoke Test Friend {{$randomInt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/friends",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. List Games",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be a paginated list of games\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.content).to.be.an('array');",
							"    pm.expect(jsonData.content.length).to.be.above(0, 'Expected at least one game to be populated');",
							"    // Save the first game's ID for the loan request",
							"    if (jsonData.content.length > 0) {",
							"        pm.collectionVariables.set(\"gameId\", jsonData.content[0].id);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/games",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"games"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Create a Loan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body should contain correct loan details\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.friendId).to.eql(parseInt(pm.collectionVariables.get(\"friendId\")));",
							"    pm.expect(jsonData.gameId).to.eql(parseInt(pm.collectionVariables.get(\"gameId\")));",
							"    pm.expect(jsonData.returned).to.be.false;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"friendId\": {{friendId}},\n    \"gameId\": {{gameId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/loans",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"loans"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. List Friends",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be a paginated list of friends\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.content).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/friends",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. Get Friend By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body should contain the correct friend details\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get(\"friendId\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. Update Friend",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body should contain the updated friend details\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Updated Smoke Test Friend\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Smoke Test Friend\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. Delete Friend",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 No Content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/friends/{{friendIdToDelete}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends",
						"{{friendIdToDelete}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "10. Create Friend to be Deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body should contain the created friend with an ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.collectionVariables.set(\"friendIdToDelete\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Friend to Delete {{$randomInt}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/friends",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"friends"
					]
				}
			},
			"response": []
		},
		{
			"name": "11. Create Game",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body should contain the created game with an ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.name).to.eql(\"Smoke Test Game\");",
							"    pm.collectionVariables.set(\"gameIdToUpdate\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Smoke Test Game\",\n    \"genre\": \"Smoke Test\",\n    \"releaseYear\": 2023\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/games",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"games"
					]
				}
			},
			"response": []
		},
		{
			"name": "12. Get Game By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body should contain the correct game details\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get(\"gameId\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/games/{{gameId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"games",
						"{{gameId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "13. Update Game",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body should contain the updated game details\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Updated Smoke Test Game\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Smoke Test Game\",\n    \"genre\": \"Smoke Test\",\n    \"releaseYear\": 2023\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/games/{{gameIdToUpdate}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"games",
						"{{gameIdToUpdate}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "14. Delete Game",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 No Content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/games/{{gameIdToUpdate}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"games",
						"{{gameIdToUpdate}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "15. List Loans",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be a paginated list of loans\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.content).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/loans",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"loans"
					]
				}
			},
			"response": []
		},
		{
			"name": "16. Return Loan",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body should show the loan as returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.returned).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/loans/{{loanId}}/return",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"loans",
						"{{loanId}}",
						"return"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "friendId",
			"value": "",
			"type": "string"
		},
		{
			"key": "gameId",
			"value": "",
			"type": "string"
		},
		{
			"key": "loanId",
			"value": "",
			"type": "string"
		},
		{
			"key": "gameIdToUpdate",
			"value": "",
			"type": "string"
		},
		{
			"key": "friendIdToDelete",
			"value": "",
			"type": "string"
		}
	]
}
